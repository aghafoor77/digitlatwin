usertype String;
hashfunction h;

const Veidblock: String;
const pkWaterStreamMgnt: Function;
const pkACC: Function;

protocol VerifiableCredentials(WaterStreamMgnt, ACC, WaterPurificationComp, Citizen)
{
	role WaterStreamMgnt {
               	secret skWaterStreamMgnt: Function;
		inversekeys (pkWaterStreamMgnt,skWaterStreamMgnt);
		const key1: String;
		fresh n: Nonce;
 		fresh inFlow: Nonce;
                fresh outFlow: Nonce;
                fresh quality: Nonce;
                
               macro eKey  = {key1}pkACC(ACC);
	       send_1(WaterStreamMgnt,ACC, {(h(key1,n))}skWaterStreamMgnt(WaterStreamMgnt), eKey);
               recv_2(ACC,WaterStreamMgnt, n );
               macro n1 = {(n)}key1(ACC);

               match(n,n1); 

               send_3(WaterStreamMgnt,ACC, {(h(inFlow, outFlow, quality))}skWaterStreamMgnt(WaterStreamMgnt),  {inFlow, outFlow, quality}key1(ACC));
		
                claim_!1(WaterStreamMgnt,Niagree);
		claim_!2(WaterStreamMgnt,Alive);		
		claim_!3(WaterStreamMgnt,Nisynch);	
		claim_!8(WaterStreamMgnt,Commit,ACC, n,n1);	
	}
	role ACC {
                 secret skACC: Function;
		inversekeys (pkACC,skACC);
		const skWaterStreamMgnt: Function;
		var n: Nonce;
		
               var inFlow: Nonce;
               var outFlow: Nonce;
                var quality : Nonce;
		var key1: String;
		recv_1(WaterStreamMgnt,ACC, {(h(key1,n))}skWaterStreamMgnt(WaterStreamMgnt), eKey);
                macro key  = {eKey}pkACC(ACC);
                send_2(ACC,WaterStreamMgnt, n);
                recv_3(WaterStreamMgnt,ACC, {(h(inFlow, outFlow, quality))}skWaterStreamMgnt(WaterStreamMgnt),  {inFlow, outFlow, quality}key1(ACC));
                
               // Verifiable Presentation (Selective disclosure) for WaterPurificationComp
		send_4(ACC,WaterPurificationComp, {(h(inFlow))}skACC(ACC), inFlow);

                // Verifiable Presentation (Selective disclosure) for Citizen
		send_5(ACC, Citizen, {(h(quality))}skACC(ACC), quality);

		claim_!4(ACC, Secret, key1 );
                claim_!5(ACC,Niagree);
		claim_!6(ACC,Alive);
		claim_!7(ACC,Nisynch);
		
	}

      role WaterPurificationComp{
                
                const skACC: Function;
                var inFlow: Nonce;
		  // Verifiable Presentation (Selective disclosure)recived from ACC with inFlow attribute
                recv_4(ACC,WaterPurificationComp, {(h(inFlow))}skACC(ACC), inFlow);
		 claim_!5(WaterPurificationComp,Niagree);
                claim_!9(WaterPurificationComp,Alive);
		claim_!10(WaterPurificationComp,Nisynch);	
	}

     role Citizen{
                 const skACC: Function;
                var quality: Nonce;
		// Verifiable Presentation (Selective disclosure)recived from ACC with quality attribute
                recv_5(ACC, Citizen, {(h(quality))}skACC(ACC), quality);
		 claim_!5(Citizen,Niagree);
                claim_!11(Citizen,Alive);
		claim_!12(Citizen,Nisynch);	
	}
};